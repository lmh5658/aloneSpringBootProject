<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="productMapper">

  
  <resultMap id="productResult" type="ProductDto">
    <id column="PRODUCT_NO" property="productNo"/>
    <result column="CATEGORY_TYPE" property="categoryType"/>
    <result column="PRODUCT_NAME" property="proName"/>
    <result column="PRODUCT_PRICE" property="productPrice"/>
    <result column="PRO_STATUS" property="proStatus"/>
    <result column="PRO_AMOUNT" property="proAmount"/>
    <result column="RPO_SALE_STATUS" property="productSaleStatus"/>
    <result column="PRO_SALE_PRICE" property="productSalePrice"/>
    <result column="PRO_THUMBNAIL_PATH" property="productThumbnailPath"/>
    <result column="PRO_DETAIL_PATH" property="productDatailPath"/>
    <result column="ORDER_CHECK" property="orderCheck"/>
    <result column="REVIEW_CHECK" property="reviewCheck"/>
    <result column="COUNT" property="count"/>
    <result column="AVG_RATING" property="avgRating"/>
    <result column="FILTER_WEIGHT" property="filterWeight"/>
    <result column="FILTER_SIZE" property="filtersize"/>
    <result column="FILTER_FUNCTIONAL" property="filterfunctional"/>
    <result column="FILTER_SALARY_TARGET" property="filtersalaryTarget"/>
    <result column="RN" property="rowNumber"/>
  </resultMap>
  
  <resultMap id="reviewResult" type="ReviewDto">
    <id column="REVIEW_NO" property="reviewNo"/>
    <result column="PRODUCT_NO" property="productNo"/>
    <result column="MEMBER_NO" property="memberNo"/>
    <result column="RATING" property="rating"/>
    <result column="REVIEW_CONTENT" property="reviewContent"/>
    <result column="REVIEW_POST_DATE" property="reviewPostDt"/>
    <result column="REVIEW_ATTACHMENT_PATH" property="reviewAttachPath"/>
    <result column="REVIEW_NICKNAME" property="nickName"/>
    <result column="REVIEW_STATUS" property="reviewStatus"/>
  </resultMap>
  

  
  
  <!-- 상품리스트 S -->
  <select id="selectProductListCount" resultType="_int">
    SELECT COUNT(*)
      FROM TB_PRODUCT
      WHERE PRO_STATUS = 'Y'
     		<choose>
			   	<when test="categoryType != null and !categoryType.equals('')">
				      AND CATEGORY_TYPE = #{categoryType}
			   	</when>
			   	<otherwise>
			   	 		AND CATEGORY_TYPE IN ('D', 'C')
			   	</otherwise>
			   </choose>
  </select>
  
  <select id="selectProductList" resultMap="productResult">
		SELECT 
	           PRODUCT_NO
	         , CATEGORY_TYPE
	         , PRODUCT_NAME
	         , PRODUCT_PRICE
	         , PRO_STATUS
				   , PRO_STATUS
				   , PRO_AMOUNT
				   , RPO_SALE_STATUS
				   , PRO_SALE_PRICE
	         , PRO_THUMBNAIL_PATH
	         , PRO_DETAIL_PATH
	         , (SELECT AVG(RATING)
	              FROM TB_REVIEW R
	             WHERE P.PRODUCT_NO =  R.PRODUCT_NO
	           GROUP BY PRODUCT_NO) AVG_RATING         
      FROM TB_PRODUCT P
     WHERE PRO_STATUS = 'Y'
      
     		<choose>
			   	<when test="categoryType != null and !categoryType.equals('')">
				      AND CATEGORY_TYPE = #{categoryType}
			   	</when>
			   	<otherwise>
			   	 		AND CATEGORY_TYPE IN ('D', 'C')
			   	</otherwise>
			   </choose>
			   
       <choose>
	       <when test="productNo != null and !productNo.equals('')">
	      AND PRODUCT_NO != #{productNo}
	   ORDER
	     	  BY AVG_RATING ASC
	       </when>
	       <otherwise>
	   ORDER
	     	  BY PRODUCT_NO DESC
	       </otherwise>
       </choose>
  </select>
  <!-- 상품리스트 E -->
  
  <!-- 상품 상세 -->
  <select id="selectProduct" resultMap="productResult">
  	  SELECT 
           PRODUCT_NO
         , CATEGORY_TYPE
         , PRODUCT_NAME
         , PRODUCT_PRICE
         , PRO_STATUS
         , PRO_AMOUNT
         , RPO_SALE_STATUS
         , PRO_SALE_PRICE
         , PRO_THUMBNAIL_PATH
         , PRO_DETAIL_PATH
         <if test="userNo != null and !userNo.equals('')">
	         , (SELECT COUNT(*) 
	              FROM TB_REVIEW
	            WHERE PRODUCT_NO = #{productNo}
	              AND MEMBER_NO = #{userNo}
	            ) REVIEW_CHECK  
	         , (SELECT COUNT(*)
	              FROM TB_ORDER
	              JOIN TB_PRODUCT_ORDER USING(ORDER_NO)
	              WHERE ORDER_PRODUCT_NO = #{productNo}
	               AND ORDER_MEMBER_NO = #{userNo}
	           ) ORDER_CHECK
           </if>
      FROM TB_PRODUCT P
     WHERE PRODUCT_NO = #{productNo}
  </select>
  <!-- 상품 상세 -->
  
  <!-- 장바구니 확인 조회용 -->
	<select id="selectCart" resultType="int">
	    SELECT COUNT(*)
	    FROM TB_CART
	    WHERE USER_NO = #{userNo}
	    <if test="productNo != null or !productNo.equals('')">
	        AND PRODUCT_NO = #{productNo}
	    </if>
	</select>
  
  <update id="updateCart">
  	UPDATE TB_CART
  	   SET 
  	  <choose>
	  	  <when test="count != null and !count.equals('')">
	  	   COUNT = COUNT + #{count}
	  	  </when>
	  	  <otherwise>
	  	   COUNT = COUNT + 1
  	  </otherwise>
  	  </choose>
		 WHERE USER_NO = #{userNo}
			 AND PRODUCT_NO = #{productNo}
  </update>
  
  <insert id="insertCart">
  	INSERT
  		INTO
  		 TB_CART
  		 (
  		  USER_NO
			,	PRODUCT_NO
			,	COUNT
  		 )
  		 VALUES
  		 (
  		   #{userNo}
  		 , #{productNo}
  	  <choose>
	  	  <when test="count != null and !count.equals('')">
	  	 , #{count}
	  	  </when>
	  	  <otherwise>
	  	 , 1
  	  </otherwise>
  	  </choose>
  		 )
  </insert>
  
  <!-- 장바구니 리스트 -->
  <select id="selectCartList" resultMap="productResult">
		SELECT
		      PRODUCT_NO
		    , PRODUCT_NAME
		    , PRODUCT_PRICE
		    , PRO_AMOUNT
		    , PRO_SALE_PRICE
		    , PRO_THUMBNAIL_PATH
		    , (SELECT DISTINCT C.COUNT 
		         FROM TB_CART C
		        WHERE P.PRODUCT_NO = C.PRODUCT_NO
		          AND USER_NO = #{userNo}
		       ) COUNT
		FROM TB_PRODUCT P
		WHERE PRODUCT_NO IN (SELECT PRODUCT_NO
		                       FROM TB_CART
                    			 WHERE USER_NO = #{userNo})
  </select>
  
  <!-- 장바구니 상품 삭제 -->
<delete id="deleteCart">
    DELETE FROM TB_CART
    WHERE USER_NO = #{userNo}
    AND PRODUCT_NO = #{productNo}
</delete>
  
  <!-- 장바구니 상품 수량변경 업데이트 -->
  <update id="cartCountUpdate">
  	UPDATE TB_CART
  	 <choose>
  	 <when test="division != null and division.equals('minus')">
  	 	 SET COUNT = COUNT - 1
  	 </when>
  	 <when test="division != null and division.equals('plus')">
  	 	 SET COUNT = COUNT + 1
  	 </when>
  	 </choose>
  	 WHERE PRODUCT_NO = ${productNo}
  	   AND USER_NO = ${userNo}
  </update>
  
  <!-- 상품 리뷰 등록 -->
  <insert id="writeReview">
  	INSERT
  			INTO
  				TB_REVIEW
  				(
  				REVIEW_NO
				,	PRODUCT_NO
				,	MEMBER_NO
				,	RATING
				,	REVIEW_CONTENT
				, REVIEW_NICKNAME
  				)
  			VALUES
  				(
  				SEQ_RENO.NEXTVAL
  			, #{productNo}
  			, #{memberNo}
  			, #{rating}
  			, #{reviewContent}
  			, #{nickName}
  				)
  </insert>
  
  <!-- 상품 리뷰 리스트 -->
  <select id="reviewSelect" resultMap="reviewResult">
  	SELECT
		     REVIEW_NO
		   , RATING
		   , MEMBER_NO
		   , REVIEW_CONTENT
		   , REVIEW_NICKNAME
		   , TO_CHAR(REVIEW_POST_DATE, 'YYYY/MM/DD') REVIEW_POST_DATE
		   
		   , (SELECT NVL(ROUND(AVG(RATING),2),0)
		       FROM TB_REVIEW
		      WHERE PRODUCT_NO = #{productNo} 
			      AND RATING = 5
			      AND REVIEW_STATUS = 'Y'
		      ) AS avgRating5
		   , (SELECT NVL(ROUND(AVG(RATING),2),0)
		       FROM TB_REVIEW
		      WHERE PRODUCT_NO = #{productNo} 
			      AND RATING = 4
			      AND REVIEW_STATUS = 'Y'
		      ) AS avgRating4
		      
		   , (SELECT NVL(ROUND(AVG(RATING),2),0)
		       FROM TB_REVIEW
		      WHERE PRODUCT_NO = #{productNo} 
			      AND RATING = 3
			      AND REVIEW_STATUS = 'Y'
		      ) AS avgRating3
		      
		   , (SELECT NVL(ROUND(AVG(RATING),2),0)
		       FROM TB_REVIEW
		      WHERE PRODUCT_NO = #{productNo} 
			      AND RATING = 2
			      AND REVIEW_STATUS = 'Y'
		      ) AS avgRating2
		      
		   , (SELECT NVL(ROUND(AVG(RATING),2),0)
		       FROM TB_REVIEW
		      WHERE PRODUCT_NO = #{productNo} 
			      AND RATING = 1
			      AND REVIEW_STATUS = 'Y'
		      ) AS avgRating1
		      
		   , (SELECT NVL(ROUND(AVG(RATING),2),0)
		       FROM TB_REVIEW
		      WHERE PRODUCT_NO = #{productNo}
		        AND REVIEW_STATUS = 'Y'
		      ) AS avgRatingTotal
		      
		   , (SELECT COUNT(RATING)
		       FROM TB_REVIEW
		      WHERE PRODUCT_NO = #{productNo}
		        AND REVIEW_STATUS = 'Y'
		      ) AS totalReviewCount
		      
		FROM TB_REVIEW
		WHERE PRODUCT_NO = #{productNo}
		 AND REVIEW_STATUS = 'Y'
		ORDER 
		   BY REVIEW_NO DESC
  </select>
  
  <!-- 리뷰 갯수 (페이징) -->
  <select id="reviewListCount" resultType="_int">
  	SELECT COUNT(*)
			FROM TB_REVIEW
		 WHERE PRODUCT_NO = #{productNo}
		  AND REVIEW_STATUS = 'Y'
  </select>
  <!-- 리뷰 글상태 업데이트(글상태 N으로) -->
  <update id="ajaxReviewDel">
  	UPDATE TB_REVIEW
  	 	 SET REVIEW_STATUS = 'N'
  	 WHERE REVIEW_NO = #{reviewNo}
  </update>
  
  <!-- 마이페이지 리뷰 조회 -->
  <select id="selectMyReviewCount" resultType="_int">
	  SELECT COUNT(*)
	    FROM TB_REVIEW
	   WHERE REVIEW_STATUS = 'Y'
			 AND MEMBER_NO = ${userNo}
  </select>
  
   <select id="selectMyReviewList" resultMap="reviewResult">
		SELECT
					 REVIEW_NO
					,PRODUCT_NO
					,RATING
					,REVIEW_CONTENT
					,TO_CHAR(REVIEW_POST_DATE, 'YY/MM/DD(DY)') AS REVIEW_POST_DATE
					,REVIEW_NICKNAME
			FROM TB_REVIEW
			WHERE REVIEW_STATUS = 'Y'
			  AND MEMBER_NO = ${userNo}
			 ORDER
			    BY REVIEW_NO DESC
  </select>
  
  <select id="insertReviewPoint">
  INSERT
  		INTO
  		  TB_POINT
  		  (
  		  POINT_NO
			,	USER_NO
			,	POINT_EXPIRY_DATE
			,	PRODUCT_NO
			,	REVIEW_WRITER_POINT
  		  )
  		 VALUES
  		 (
  		  SEQ_POINO.NEXTVAL
  		, #{userNo}
  		, SYSDATE + 365
  		, #{productNo}
  		, 500
  		 )
  </select>
  
  <!-- 필터검색 리스트 -->
  <select id="selectFilterSearchCount" resultType="_int">
  
		WITH PRODUCT_RATING AS (
			    SELECT
			        p.PRODUCT_NO,
			        p.CATEGORY_TYPE,
			        p.PRODUCT_NAME,
			        p.PRODUCT_PRICE,
			        p.PRO_SALE_PRICE,
			        p.PRO_STATUS,
			        p.PRO_AMOUNT,
			        p.RPO_SALE_STATUS,
			        p.PRO_THUMBNAIL_PATH,
			        p.PRO_DETAIL_PATH,
			        (SELECT ROUND(AVG(r.RATING), 1)
			         FROM TB_REVIEW r
			         WHERE r.PRODUCT_NO = p.PRODUCT_NO
			        ) AS AVG_RATING,
			        p.FILTER_WEIGHT,
			        p.FILTER_SIZE,
			        p.FILTER_FUNCTIONAL,
			        p.FILTER_SALARY_TARGET
			    FROM TB_PRODUCT p
			    WHERE p.PRO_STATUS = 'Y'
			   <choose>
			   	<when test="type != null and !type.equals('')">
				      AND p.CATEGORY_TYPE = #{type}
			   	</when>
			   	<otherwise>
			   	 		AND p.CATEGORY_TYPE IN ('D', 'C')
			   	</otherwise>
			   </choose>
			)
			SELECT COUNT(*)
			FROM PRODUCT_RATING
			WHERE 1=1
			<if test="weight != null and !weight.isEmpty()">
			    AND FILTER_WEIGHT IN
			    <foreach collection="weight" item="item" open="(" separator="," close=")">
			        #{item}
			    </foreach>
			</if>
			<if test="size != null and !size.isEmpty()">
			    AND FILTER_SIZE IN
           <foreach collection="size" item="item" open="(" separator="," close=")">
               #{item}
           </foreach>
			</if>
			<if test="functional != null and !functional.isEmpty()">
				    AND FILTER_FUNCTIONAL IN
	            <foreach collection="functional" item="item" open="(" separator="," close=")">
	                #{item}
	            </foreach>
				</if>
				<if test="priceList != null and !priceList.isEmpty()">
					    AND 
					    <foreach collection="priceList" item="map" open="(" separator=" OR " close=")">
					        <choose>
					            <when test="map.lastPrice != null">
					                PRODUCT_PRICE BETWEEN #{map.firstPrice} AND #{map.lastPrice}
					            </when>
					            <otherwise>
					               <![CDATA[ PRODUCT_PRICE <= #{map.firstPrice}]]>	
					            </otherwise>
					        </choose>
					    </foreach>
					</if>
			  <if test="rating != null and !rating.isEmpty()">
			      AND (
			      <foreach collection="rating" item="item" open="(" separator=" OR " close=")">
			          AVG_RATING >= #{item}
			      </foreach>
			      )
			  </if>
			  <if test="salaryTarget != null and !salaryTarget.isEmpty()">
			    AND FILTER_SALARY_TARGET IN
           <foreach collection="salaryTarget" item="item" open="(" separator="," close=")">
               #{item}
           </foreach>
				</if>
		
  </select>
  
  <select id="selectFilterSearchList" resultMap="productResult">
 	
			 WITH PRODUCT_RATING AS (
			    SELECT
			        p.PRODUCT_NO,
			        p.CATEGORY_TYPE,
			        p.PRODUCT_NAME,
			        p.PRODUCT_PRICE,
			        p.PRO_SALE_PRICE,
			        p.PRO_STATUS,
			        p.PRO_AMOUNT,
			        p.RPO_SALE_STATUS,
			        p.PRO_THUMBNAIL_PATH,
			        p.PRO_DETAIL_PATH,
			        (SELECT ROUND(AVG(r.RATING), 1)
			         FROM TB_REVIEW r
			         WHERE r.PRODUCT_NO = p.PRODUCT_NO
			        ) AS AVG_RATING,
			        p.FILTER_WEIGHT,
			        p.FILTER_SIZE,
			        p.FILTER_FUNCTIONAL,
			        p.FILTER_SALARY_TARGET
			    FROM TB_PRODUCT p
			    WHERE p.PRO_STATUS = 'Y'
			   <choose>
			   	<when test="type != null and !type.equals('')">
				      AND p.CATEGORY_TYPE = #{type}
			   	</when>
			   	<otherwise>
			   	 		AND p.CATEGORY_TYPE IN ('D', 'C')
			   	</otherwise>
			   </choose>
			)
			SELECT *
			FROM PRODUCT_RATING
			WHERE 1=1
			<if test="weight != null and !weight.isEmpty()">
			    AND FILTER_WEIGHT IN
			    <foreach collection="weight" item="item" open="(" separator="," close=")">
			        #{item}
			    </foreach>
			</if>
			<if test="size != null and !size.isEmpty()">
			    AND FILTER_SIZE IN
           <foreach collection="size" item="item" open="(" separator="," close=")">
               #{item}
           </foreach>
			</if>
			<if test="functional != null and !functional.isEmpty()">
				    AND FILTER_FUNCTIONAL IN
	            <foreach collection="functional" item="item" open="(" separator="," close=")">
	                #{item}
	            </foreach>
				</if>
				<if test="priceList != null and !priceList.isEmpty()">
					    AND 
					    <foreach collection="priceList" item="map" open="(" separator=" OR " close=")">
					        <choose>
					            <when test="map.lastPrice != null">
					                PRODUCT_PRICE BETWEEN #{map.firstPrice} AND #{map.lastPrice}
					            </when>
					            <otherwise>
					              <![CDATA[  PRODUCT_PRICE <= #{map.firstPrice}	]]>	
					            </otherwise>
					        </choose>
					    </foreach>
					</if>
			  <if test="rating != null and !rating.isEmpty()">
			      AND (
			      <foreach collection="rating" item="item" open="(" separator=" OR " close=")">
			          AVG_RATING >= #{item}
			      </foreach>
			      )
			  </if>
			  <if test="salaryTarget != null and !salaryTarget.isEmpty()">
			    AND FILTER_SALARY_TARGET IN
           <foreach collection="salaryTarget" item="item" open="(" separator="," close=")">
               #{item}
           </foreach>
				</if>
		ORDER BY PRODUCT_NO DESC
		</select>
			
		<select id="selectSearchCount" resultType="_int">
			SELECT COUNT(*)  
	      FROM TB_PRODUCT P
	     WHERE PRO_STATUS = 'Y'
	     <choose>
		   	<when test="type != null and !type.equals('')">
			      AND CATEGORY_TYPE = #{type}
		   	</when>
		   	<otherwise>
		   	 		AND CATEGORY_TYPE IN ('D', 'C')
		   	</otherwise>
		   </choose>
	       AND (PRODUCT_NAME LIKE '%' || #{search} || '%' OR 
	       			PRODUCT_PRICE LIKE '%' || #{search} || '%' )
		</select>
			
		<select id="selectSearchList" resultMap="productResult">
		SELECT 
           PRODUCT_NO
         , CATEGORY_TYPE
         , PRODUCT_NAME
         , PRODUCT_PRICE
         , PRO_STATUS
			   , PRO_AMOUNT
			   , RPO_SALE_STATUS
			   , PRO_SALE_PRICE
         , PRO_THUMBNAIL_PATH      
      FROM TB_PRODUCT P
     WHERE PRO_STATUS = 'Y'
     	 <choose>
		   	<when test="type != null and !type.equals('')">
			      AND CATEGORY_TYPE = #{type}
		   	</when>
		   	<otherwise>
		   	 		AND CATEGORY_TYPE IN ('D', 'C')
		   	</otherwise>
		   </choose>
       AND (PRODUCT_NAME LIKE '%' || #{search} || '%' OR 
      			  PRODUCT_PRICE LIKE '%' || #{search} || '%' )
		</select>
		
		<select id="selectMainProduct" resultMap="productResult">
		<![CDATA[
			SELECT Z.* 
							FROM (
							        SELECT ROWNUM AS RN, A.*
							          FROM (	
															SELECT
															    PRODUCT_NO,
															    PRODUCT_NAME,
															    PRODUCT_PRICE,
															    PRO_SALE_PRICE,
															    RPO_SALE_STATUS,
															    PRO_THUMBNAIL_PATH
															FROM TB_PRODUCT
															WHERE PRODUCT_NO IN (SELECT ORDER_PRODUCT_NO
															                       FROM (SELECT ORDER_PRODUCT_NO, COUNT(ORDER_PRODUCT_AMOUNT) AS ORDER_COUNT
															                            FROM TB_PRODUCT_ORDER
															                            GROUP BY ORDER_PRODUCT_NO
															                            ORDER BY ORDER_COUNT DESC
															                        )
															                    WHERE ROWNUM <= 10)
							        ) A
							    ) Z
							WHERE Z.RN BETWEEN 1 AND 10
			]]>			
		</select>
		
	

			
  

  
  
  
  <!-- 
  <insert id="insertNotice">
    insert
      into notice
      (
        notice_no
      , notice_title
      , notice_content
      , notice_writer
      )
      values
      (
        seq_nno.nextval
      , #{noticeTitle}
      , #{noticeContent}
      , #{noticeWriter}
      )
  </insert>
  
  <insert id="insertAttach">
    insert
      into attachment
      (
        file_no
      , file_path
      , filesystem_name
      , original_name
      , ref_type
      , ref_no
      )
      values
      (
        seq_ano.nextval
      , #{filePath}
      , #{filesystemName}
      , #{originalName}
      , #{refType}
      , seq_nno.currval
      )
  </insert>
  
  <select id="selectNotice" resultMap="noticeResult">
    select
           notice_no
         , notice_title
         , notice_content
         , user_id
         , to_char(regist_date, 'YYYY-MM-DD') regist_date
         , file_path
         , filesystem_name
         , original_name
      from notice
      join member on(notice_Writer = user_no)
      left join attachment on (ref_type='N' and ref_no = notice_no)
     where notice_no = #{noticeNo}
  </select>
  -->
  

	
</mapper>
